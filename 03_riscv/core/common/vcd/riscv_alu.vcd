$date
	Fri Jun  7 23:49:26 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module riscv_alu_tb $end
$var wire 1 ! o_alu_zero $end
$var wire 32 " o_alu_result [31:0] $end
$var reg 32 # i_alu_a [31:0] $end
$var reg 32 $ i_alu_b [31:0] $end
$var reg 4 % i_alu_ctrl [3:0] $end
$var reg 128 & taskState [127:0] $end
$var reg 256 ' vcd_file [255:0] $end
$var integer 32 ( i [31:0] $end
$scope module u_riscv_alu $end
$var wire 32 ) i_alu_a [31:0] $end
$var wire 32 * i_alu_b [31:0] $end
$var wire 4 + i_alu_ctrl [3:0] $end
$var wire 1 ! o_alu_zero $end
$var reg 32 , o_alu_result [31:0] $end
$upscope $end
$scope task ADD $end
$upscope $end
$scope task AND $end
$upscope $end
$scope task OR $end
$upscope $end
$scope task SLL $end
$upscope $end
$scope task SLT $end
$upscope $end
$scope task SLTU $end
$upscope $end
$scope task SRA $end
$upscope $end
$scope task SRL $end
$upscope $end
$scope task SUB $end
$upscope $end
$scope task XOR $end
$upscope $end
$scope task init $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ,
b0 +
b0 *
b0 )
bx (
b101110001011110111011001100011011001000010111101110010011010010111001101100011011101100101111101100001011011000111010100101110011101100110001101100100 '
bx &
b0 %
b0 $
b0 #
b0 "
1!
$end
#40000
b0 (
#50000
b1 (
b1000000100010010101111010000001 $
b1000000100010010101111010000001 *
b10010010000101010011010100100100 #
b10010010000101010011010100100100 )
b11 %
b11 +
b1010011010011000101010001010101 &
#60000
0!
b1 "
b1 ,
b10 (
b110001111100000101011001100011 $
b110001111100000101011001100011 *
b100100001001101011000001001 #
b100100001001101011000001001 )
#70000
b11 (
b11000110110111111001100110001101 $
b11000110110111111001100110001101 *
b10000110101110010111101100001101 #
b10000110101110010111101100001101 )
#80000
1!
b0 "
b0 ,
b100 (
b1001001101110101001000010010 $
b1001001101110101001000010010 *
b110010110000101000010001100101 #
b110010110000101000010001100101 )
#90000
0!
b1 "
b1 ,
b101 (
b10000110110101111100110100001101 $
b10000110110101111100110100001101 *
b10000000111100111110001100000001 #
b10000000111100111110001100000001 )
#100000
1!
b0 "
b0 ,
b110 (
b10011110100011011100110100111101 $
b10011110100011011100110100111101 *
b10111011001000111111000101110110 #
b10111011001000111111000101110110 )
#110000
b111 (
b11000110001011011111011110001100 $
b11000110001011011111011110001100 *
b11110110110101000101011111101101 #
b11110110110101000101011111101101 )
#120000
b1000 (
b1100011001101110010010011000110 $
b1100011001101110010010011000110 *
b11111100111111011110100111111001 #
b11111100111111011110100111111001 )
#130000
b1001 (
b1010101000100111101001010101010 $
b1010101000100111101001010101010 *
b1100010111101111000010011000101 #
b1100010111101111000010011000101 )
#140000
b1010 (
b111011110100100111001001110111 $
b111011110100100111001001110111 *
b11110010101011111111011111100101 #
b11110010101011111111011111100101 )
#150000
0!
b1 "
b1 ,
b1011 (
b11000111111011001101101110001111 $
b11000111111011001101101110001111 *
b1001001100101101011000010010 #
b1001001100101101011000010010 )
#160000
1!
b0 "
b0 ,
b1100 (
b1100111011101101001011011001110 $
b1100111011101101001011011001110 *
b11111001001100000110100111110010 #
b11111001001100000110100111110010 )
#170000
b1101 (
b1100010110010100100111011000101 $
b1100010110010100100111011000101 *
b1110100000000000111101011101000 #
b1110100000000000111101011101000 )
#180000
b1110 (
b1011110100011100010100010111101 $
b1011110100011100010100010111101 *
b10101110010110000100100101011100 #
b10101110010110000100100101011100 )
#190000
0!
b1 "
b1 ,
b1111 (
b110010101001110010011001100101 $
b110010101001110010011001100101 *
b10110101010110101100000101101 #
b10110101010110101100000101101 )
#200000
b10000 (
b10000101011100111000011100001010 $
b10000101011100111000011100001010 *
b110001111011110110001001100011 #
b110001111011110110001001100011 )
